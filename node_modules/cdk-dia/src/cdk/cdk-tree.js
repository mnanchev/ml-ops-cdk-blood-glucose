"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = exports.ConstructInfoFqn = exports.Tree = void 0;
class Tree {
    static fromObject(object) {
        const tree = new Tree();
        tree.version = object['version'];
        tree.tree = Node.fromObject(object['tree']);
        return tree;
    }
}
exports.Tree = Tree;
class ConstructInfoFqn {
    constructor(cdkVal) {
        this.cdkVal = cdkVal;
    }
}
exports.ConstructInfoFqn = ConstructInfoFqn;
ConstructInfoFqn.STACK = new ConstructInfoFqn("@aws-cdk/core.Stack");
ConstructInfoFqn.STAGE = new ConstructInfoFqn("@aws-cdk/core.Stage");
ConstructInfoFqn.APP = new ConstructInfoFqn("@aws-cdk/core.App");
ConstructInfoFqn.CUSTOM_RESOURCE = new ConstructInfoFqn("@aws-cdk/core.CustomResource");
ConstructInfoFqn.of = (val) => [
    ConstructInfoFqn.STACK,
    ConstructInfoFqn.STAGE,
    ConstructInfoFqn.APP,
    ConstructInfoFqn.CUSTOM_RESOURCE
].find(fqn => fqn.cdkVal === val);
class Node {
    constructor() {
        this.constructInfoFqn = undefined;
        this.pathParts = () => this.path.split("/");
    }
    findInSubTree(predicate) {
        if (predicate(this))
            return this;
        const childrenArr = Array.from(this.children);
        for (const childrenKey in childrenArr) {
            const node = childrenArr[childrenKey][1].findInSubTree(predicate);
            if (node != null)
                return node;
        }
        return null;
    }
    static fromObject(object) {
        const node = new Node();
        node.id = object['id'];
        node.path = object['path'];
        node.children = new Map();
        if (object['children'] != undefined) {
            for (const childKey in object['children']) {
                node.children.set(childKey, Node.fromObject(object['children'][childKey]));
            }
        }
        node.attributes = new Map();
        if (object['attributes'] != undefined) {
            for (const attrKey in object['attributes']) {
                node.attributes.set(attrKey, object['attributes'][attrKey]);
            }
        }
        if (object['constructInfo'] != undefined && object['constructInfo']['fqn'] != undefined) {
            node.constructInfoFqn = ConstructInfoFqn.of(object['constructInfo']['fqn']);
        }
        return node;
    }
}
exports.Node = Node;
//# sourceMappingURL=cdk-tree.js.map