"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Generator = void 0;
const fs = __importStar(require("fs"));
const util = __importStar(require("util"));
const _ = __importStar(require("lodash"));
const hasbin = __importStar(require("hasbin"));
const word_wrap_1 = __importDefault(require("word-wrap"));
const child_process_1 = __importDefault(require("child_process"));
const ts_graphviz_1 = require("ts-graphviz");
const sanitizeFilename = require('sanitize-filename');
const styling = __importStar(require("./styling"));
const rendering_error_1 = require("./rendering-error");
const exec = util.promisify(child_process_1.default.exec);
class Generator {
    constructor(dia) {
        this.rootGraph = ts_graphviz_1.digraph('Diagram');
        styling.applyBaseGraphStyling(this.rootGraph);
        this.diagramGraph(dia);
    }
    async generatePng(path) {
        const dotFileName = this.generateDot(path);
        try {
            await this.dotToPng(dotFileName, path);
        }
        catch (e) {
            if (!hasbin.sync(Generator.graphvizBinary)) {
                throw new rendering_error_1.RenderingError("Graphvig '" + Generator.graphvizBinary + "' binary does not exist locally or in PATH", [], [
                    "Install Graphviz and make sure it is available in PATH",
                    "Using brew: 'brew install graphviz'"
                ]);
            }
            else {
                if (e instanceof rendering_error_1.RenderingError) {
                    throw e;
                }
                else {
                    throw new rendering_error_1.RenderingError(e.message);
                }
            }
        }
        return path;
    }
    generateDot(path) {
        const data = ts_graphviz_1.toDot(this.rootGraph);
        const fullPath = `${path}.dot`;
        fs.writeFileSync(fullPath, data);
        return fullPath;
    }
    breakLineEveryMaxChars(label, charsPerLine) {
        let fullWords;
        if (label == undefined)
            fullWords = [""];
        else
            fullWords = _.flatten(label.map(part => { return _.replace(part, /\n/g, "").split(" "); }));
        let words = this.wordsToLabel(fullWords, charsPerLine).filter(word => { return word.trim().length > 0; });
        if (words.length == 0) {
            const fullWords2 = _.flatten(label.map(part => { return _.replace(part, /[\n\-_\s:]/g, " ").split(" "); }));
            words = fullWords2.map(word => { return word.substr(0, charsPerLine); });
        }
        const lines = [];
        let curLine = "";
        while (words.length > 0) {
            if ((curLine + " " + words[0]).length <= charsPerLine) {
                curLine += " " + words[0];
            }
            else {
                if (words[0].length >= charsPerLine) {
                    lines.push(curLine);
                    curLine = "";
                    lines.push(words[0]);
                }
                else {
                    lines.push(curLine);
                    curLine = words[0];
                }
            }
            words = words.slice(1);
        }
        if (curLine.length > 0)
            lines.push(curLine);
        return lines;
    }
    wordsToLabel(fullWords, charsPerLine) {
        const words = [];
        fullWords.forEach(word => {
            if (word.length <= charsPerLine) {
                words.push(word);
            }
            else {
                const wrapped = word_wrap_1.default(word, {
                    cut: true,
                    width: charsPerLine
                }).trim();
                wrapped.split("\n").forEach(shortWord => words.push(shortWord));
            }
        });
        return words;
    }
    diagramGraph(d) {
        const root = this.rootGraph.createSubgraph(d.root.id);
        this.addToGraph(root, d.root);
        this.addEdges(this.rootGraph, d.root);
    }
    addToGraph(g, node) {
        const labelFontSize = 12;
        const charsPerLine = labelFontSize * 1.8;
        if (node.subComponents().length > 0) {
            const subGraph = g.createSubgraph(`cluster-SubGraph.${node.label}`);
            subGraph.attributes.graph.set("label", node.label.join(" "));
            styling.applyClusterStyling(subGraph, node.depth());
            node.subComponents().forEach(sub => this.addToGraph(subGraph, sub));
        }
        else {
            const gnode = g.createNode(node.id);
            const labelLines = this.breakLineEveryMaxChars(node.label, charsPerLine);
            gnode.attributes.set("label", labelLines.join("\n"));
            styling.applyBasicNodeStyling(gnode, labelFontSize);
            if (node.icon != null && node.icon.path != null) {
                styling.applyNodeWithIconStyling(gnode, node.icon, labelFontSize, labelLines.length);
            }
        }
    }
    addEdges(g, node) {
        node.links.getLinkedComponents().forEach(edgeNode => {
            if (node.depth() == 1 && edgeNode.depth() == 1) {
                const nodeArbitraryChild = this.findFirstArbitraryClusterDirectLeaf(node);
                const edgeNodeArbitraryChild = this.findFirstArbitraryClusterDirectLeaf(edgeNode);
                if (nodeArbitraryChild !== undefined && edgeNodeArbitraryChild !== undefined) {
                    g.createEdge([nodeArbitraryChild.id, edgeNodeArbitraryChild.id], {
                        dir: "both",
                        ltail: `cluster-SubGraph.${node.id}`,
                        lhead: `cluster-SubGraph.${edgeNode.id}`,
                        color: "black",
                        penwidth: 1
                    });
                }
            }
            else {
                g.createEdge([node.id, edgeNode.id], { dir: "both" });
            }
        });
        node.subComponents().forEach(sub => {
            this.addEdges(g, sub);
        });
    }
    findFirstArbitraryClusterDirectLeaf(node) {
        return node.subComponents().find(sub => { return sub.subComponents().length == 0; });
    }
    async dotToPng(sourceDotFile, targetPngFile) {
        const cmd = `${Generator.graphvizBinary} ${sanitizeFilename(sourceDotFile)} -T png > ${sanitizeFilename(targetPngFile)}`;
        try {
            const { stdout, stderr } = await exec(cmd);
            const fileExists = fs.existsSync(targetPngFile);
            if (!fileExists) {
                throw new rendering_error_1.RenderingError("Failed to generate PNG: file does not exist.");
            }
            const stats = fs.lstatSync(targetPngFile);
            if (stats.size < 2) {
                throw new rendering_error_1.RenderingError("Generated PNG doesn't seem valid: file size is too small.", [stdout, stderr], [". make sure Graphviz is installed and available in the PATH"]);
            }
        }
        catch (e) {
            throw new rendering_error_1.RenderingError(e.message);
        }
        return true;
    }
}
exports.Generator = Generator;
Generator.graphvizBinary = "dot";
//# sourceMappingURL=generator.js.map