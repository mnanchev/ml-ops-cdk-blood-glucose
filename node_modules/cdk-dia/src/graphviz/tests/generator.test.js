"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const rimraf = __importStar(require("rimraf"));
const generator_1 = require("../generator");
const testCases_1 = require("../../test-fixtures/testCases");
const generator_test_1 = require("../../diagram/tests/generator.test");
const path = __importStar(require("path"));
if (global['jest-specific-init'] == undefined) {
    global['jest-specific-init'] = true;
    require("jest-specific-snapshot");
}
jest.setTimeout(3000000);
const basePath = `${process.cwd()}/test-generated`;
beforeAll(() => {
    rimraf.sync(basePath);
    fs.mkdirSync(basePath);
});
describe("diagram converted to DOT file as expected", () => {
    testCases_1.testCases.forEach(test => {
        it(`${test.cdkTreePath} - ${test.jsonTreeFile} - ${test.id}`, async () => {
            const diagram = generator_test_1.givenDiagram(test);
            const generator = new generator_1.Generator(diagram);
            const filePath = `${basePath}/${test.jsonTreeFile}-${test.id}`;
            const dotPath = generator.generateDot(filePath);
            const pathToSnap = path.resolve(process.cwd(), `./snapshots/diagram-converted-to-DOT-file-as-expected-${test.jsonTreeFile}-${test.id}.snapshot`);
            expect(fs.readFileSync(dotPath).toString()).toMatchSpecificSnapshot(pathToSnap);
        });
    });
});
//# sourceMappingURL=generator.test.js.map