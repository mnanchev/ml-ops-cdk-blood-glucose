import { ComponentLinks } from "../component-links";
import { Link } from "./link";
import { ComponentIcon } from "./icon";
import { RootComponent } from "./root-component";
export declare type ComponentId = string;
export declare enum ComponentTags {
    isCdkStack = "isCdkStack",
    isCdkStage = "isCdkStage",
    collapssingOverride = "collapssingOverride"
}
export declare abstract class Component {
    protected constructor(id: ComponentId);
    private _id;
    idPathParts: () => Array<string>;
    get id(): ComponentId;
    private setId;
    label: string[];
    icon: ComponentIcon | null;
    tags: Map<string, string>;
    private _subComponents;
    subComponents(): Component[];
    protected abstract parent(): Component;
    protected abstract destroyLinks(): void;
    abstract depth(): number;
    abstract toSimpleObject(): Record<string, unknown>;
    abstract assureIdDoesNotExistInConnectedComponents(id: ComponentId): void;
    abstract treeRoot(): RootComponent;
    removeSubComponent(component: Component): void;
    addSubComponent(component: Component): void;
    removeAndDestroyAllSubComponents(): void;
    replaceSubComponent(component: Component, newComponent: Component): void;
    private removeAndDestroyAllSubComponentsRec;
    destroyAndDetach(): void;
    collapseToParent(): void;
    subTreeComponentIds(): Set<ComponentId>;
    componentIsInSubTree(search: Component): boolean;
    subTreeApplyAllComponents(lambda: (Component: any) => void): void;
    private applyAllComponentsRec;
    subTreeFindComponentById(id: string): Component | null;
    subTreeFindComponent(predicate: (Component: any) => boolean): Component | null;
    private subTreeFindComponentRec;
    private subTreeComponents;
    private _links;
    get links(): ComponentLinks;
    subTreeReverseLinks(withSelf?: boolean): Array<Link>;
    private subTreeReverseLinksRec;
    subTreeLinks(): Array<Link>;
    private subTreeLinksRec;
    treeAncestorWithTag(tagKey: ComponentTags, tagVal: string): Component;
    isAncestor(possibleAncestor: Component): boolean;
}
