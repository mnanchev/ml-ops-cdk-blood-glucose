#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const terminal_link_1 = __importDefault(require("terminal-link"));
const yargs_1 = __importDefault(require("yargs/yargs"));
const path = __importStar(require("path"));
const graphviz_1 = require("../src/graphviz");
const cdk_dia_1 = require("../src/cdk-dia");
async function initCli() {
    return yargs_1.default(process.argv.slice(2)).options({
        'cdk-tree-path': { type: 'string', alias: 'tree', default: 'cdk.out/tree.json', describe: 'Path of synthesized cdk cloud assembly' },
        'target-path': { type: 'string', alias: 'target', default: 'diagram.png', describe: 'Target path for rendered PNG' },
        'collapse': { type: 'boolean', default: true, describe: 'Collapse CDK Constructs' },
        'stacks': { type: 'array', describe: 'Stacks to include (if not specified all stacks are diagramed)' }
    }).version(false).argv;
}
async function generateDiagram(args) {
    const cdkDia = new cdk_dia_1.CdkDia();
    let includedStacks = false;
    if (args.stacks !== undefined) {
        includedStacks = args.stacks.map(it => it.toString());
    }
    const packageBasePath = path.dirname(require.resolve('cdk-dia/package.json'));
    cdkDia.generateDiagram(args["cdk-tree-path"], args["target-path"], args.collapse, packageBasePath, includedStacks).then((pngFilename) => {
        if (terminal_link_1.default.isSupported)
            console.log(chalk_1.default.green(`CDK code diagram generated to PNG at ${chalk_1.default.bold(terminal_link_1.default(pngFilename, pngFilename))}`));
        else
            console.log(chalk_1.default.green(`CDK code diagram generated to PNG at ${chalk_1.default.bold(pngFilename)}`));
    }).catch(e => {
        throw e;
    });
}
function printError(e) {
    if (e instanceof graphviz_1.RenderingError) {
        notifyRenderingError(e);
    }
    else {
        console.log(e);
        notifyRenderingError(new graphviz_1.RenderingError(`Unexpected error occurred: ${e.message}`));
    }
}
function notifyRenderingError(e) {
    console.log(e);
    console.log(`${chalk_1.default.red.bold(`Failed to render diagram: ${e.message}`)}`);
    if (e.fixTips.length > 0)
        console.log(`${chalk_1.default.underline(`What could you try?`)}`);
    e.fixTips.forEach(tip => {
        console.log(`\t${tip}`);
    });
}
initCli().then(args => {
    generateDiagram(args).catch(printError);
}).catch(printError);
//# sourceMappingURL=cli.js.map